开发介绍
=====================

一、 产品需求完成情况
*********************

1. 用户信息添加获取：

    + 通过手机号密码注册和登录【完成】  `用户注册和登录 </dejavu/interface/user>`_
    + 查看个人信息，购买历史，余额等【完成】 `用户查询 </dejavu/interface/user.html#id11>`_
    + 可以充值余额，实现一个假的就好【完成】 `账户充值 </dejavu/interface/account.html#id6>`_

2. 用户可以查看图书信息：

    + 获取图书列表，展示书名，作者，价格等【完成】  `获取图书列表 </dejavu/interface/book>`_
    + 获取图书详情，除展示列表中已有信息之外，还需要简介，目录等【完成】  `获取图书详情 </dejavu/interface/book.html#id>`_

3. 用户可以购买图书：

    + 把书放入购物车，可以从购物车删除【完成】 `添加到购物车、从购物车删除 </dejavu/interface/cart.html#id6>`_
    + 从购物车中的部分或全部图书生成订单【完成】 `创建订单 </dejavu/interface/order.html#id2>`_
    + 填写收货地址，使用余额支付订单【完成】 `新增收货地址 </dejavu/interface/address.html>`_ 、`支付订单 </dejavu/interface/order.html#id6>`_
    + 订单可以取消【完成】 `取消订单 </dejavu/interface/order.html#id11>`_

二、 技术需求完成情况
*********************

1. 使用 Tornado 作为应用框架, SQLAlchemy 作为 ORM
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

完成

2. 使用 Python 3，符合 PEP-8
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

完成

    使用 black 做代码格式化、使用 pycodestyle 做代码检查

    格式化代码： ``make fmt``

    代码检查： ``make lint``

3. 接口文档，遵循 RESTful
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

完成

    所有的接口都有对应的文档，接口文档详见 `接口文档 </dejavu/interface/user>`_

4. 带有单元测试/集成测试
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

部分完成

    基于 table driven test 的思路，目前只完成了用户创建和登录部分的单元测试和集成测试

    但是整个测试框架和思路已经比较完善，后续只需要继续增加其他部分的单元测试和集成测试代码即可

    使用 pytest 运行整个测试项目， 运行 ``make test`` 即可运行所有测试

5. 总代码量不用太多，使用 Git 管理
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

完成

    项目在 GitHub 上，由于是一个人开发，没有使用多分支、issue/pr 的模式，代码都在 master 分支，文档在 gh-pages 分支

    使用 `Travis CI <https://travis-ci.org/keaising/dejavu>`_ 保证项目在 Python3.6/3.7 下的能通过 pycodestyle 的检查、并能通过全部单元测试、集成测试

    使用 `GitHub Action <https://github.com/keaising/dejavu/actions>`_ 自动测试、自动编译文档并部署

6. 做好依赖管理
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

完成

    使用 pip 自带的 freeze 功能将项目依赖都管理到 requirement.txt 文件中

三、 项目亮点
*********************

1. 产品需求和技术需求基本满足
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

只花了不到 6 天时间完成了

+ Tornado/SQLAlchemy 的学习
+ 测试框架的选择和学习
+ 项目基础框架搭建
+ 文档工具选型（选择了比较成熟的 Sphinx + GitHub Pages）
+ CI/CD 的配置和调试
+ 编写业务代码、测试代码

虽然还有一部分单元测试和集成测试有待完善，但是总体功能完成

2. 代码清晰、文档完善
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

代码
    + 项目代码在 ``src`` 目录
    + 参考了其他 Tornado 项目的结构划分为 dal\model\handler 三个模块

        * dal 为数据访问层，不包含业务代码，方便mock和测试
        * model 为 SQLAlchemy 的 Table 层，不包含业务代码
        * handler 为业务层，由于业务逻辑实现得比较简略，没有继续抽象和分层，只是将部分可以共用的方法抽离出来成 module 方法共用，在项目足够复杂的情况下可以继续抽象和使用 DDD 进行设计和规划
    + 基于 table driven test 的思路编写了测试代码，测试代码在 ``test`` 目录
    + 单元测试主要是针对业务流程无关的函数，集成测试主要是针对业务流程进行

文档
    + 文档代码在 ``docs`` 目录
    + 所有接口都有相应的接口，接口都写明了接口名、请求类型、所需参数和返回值等信息
    + 文档工具选择了 Sphinx + GitHub Pages，没有选择我更熟悉的 Swagger，原因如下：

        * 暂时没有闲置的服务器可以把 Swagger Host起来，面试官不一定会运行代码看文档
        * 搜到的很多 Python 文档都使用 Sphinx，广泛使用的东西即便是有坑、能找到解决方案的可能性也比较大，况且它还开源，方便在有需要的时候自己魔改
        * 生成的文档是静态文件，可以直接放到 GitHub Pages 上，不运行代码也能看到
    + 文档通过 `GitHub Action <https://github.com/keaising/dejavu/actions>`_ 持续部署到 `dejavu-homework <https://shuxiao.wang/dejavu>`_

3. 在要求之外使用了 CI/CD/Makefile
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

初衷
    节省时间、提高开发效率，还可以减少人为失误

选型
    选择 `Travis CI <https://travis-ci.org/keaising/dejavu>`_ 运行 lint 和 test，因为它文档完善、社区活跃、用户比较多、而且我已经有在其他项目里使用过一年多，配置简单、服务稳定

    出于学习和尝鲜的目的使用 `GitHub Action <https://github.com/keaising/dejavu/actions>`_ 做文档的自动编译和部署

    Makefile 主要是为了方便自己在本地格式化代码、运行单元测试，同时 CI/CD 也可以直接引用

四、 时间花费情况
*********************

认真开始投入到这个项目是 2019.10.01 晚上，之前只是初步浏览了一下 Tornado 的文档

10.01
    照着 Tornado/SQLAlchemy 教程搭建起项目框架，跑通了第一个 hello world 和数据库

10.02
    完成了用户注册和登录的第一版代码，但是没有想明白到底要怎么测试

    遇到的问题：异步代码测试

    完成了：引入 black/pycodestyle 不用关心 PEP8 的问题了，部署好 Travis CI

10.03
    查了一天资料，读了很多别人的代码

    读了更多关于 Tornado 的资料

    搞明白了异步代码要怎么测试

10.04
    继续修改集成测试

    修改 GitHub Action 的配置

    完成了：用户注册和登录、账户充值和查询

10.05
    文档调研、试用和配置，选择了 Sphinx，学习 reStructuredText 语法

    找了个小工具 pytablewriter 自动生成 reStructuredText 的表格，并配置到 Makefile

    编写了用户注册和登录、账户充值和查询的文档

    写了一部分图书相关的业务代码

10.06
    完成图书相关的业务代码

    完成订单的业务代码

    编写所有接口的文档

    撰写本说明

五、 不足和反思
*********************

不足
+++++++++++++++++++++

单元测试和集成测试不完善
    在时间有限的情况下我选择牺牲了单元测试和集成测试，优先保证业务代码主体完工

    但是我并没有完全不考虑写测试，在业务代码的编写过程中，我经过思考之后，刻意将诸如访问数据库、从request body中获取参数之类的操作都独立出来，就是为了方便后续编写测试代码

    我认为在时间允许的情况下，保证单元测试100%覆盖和通过是非常有必要的，从总的开发和维护成本来说，写测试比不写测试要好

逻辑实现比较简单
    同样也是时间关系，在很多业务逻辑的实现上都非常简单

    比如订单生成和支付的逻辑，生成和支付过程都有大量的校验逻辑被省略了

    数据库的实现非常简单，直接使用了内存数据库，没有使用 MySQL/SQLite3 之类能持久化的数据库，因为有 SQLAlchemy 的存在数据库被抽象了，暂时可以不用考虑

    此外类似的问题还有异常捕获和日志记录的问题，在尽量节省时间的情况下我依然选择实现了一个非常简单的捕获和记录，主要考虑是方便自己排查问题和修复跑挂了的测试

缺少 docker image
    本来的打算中想将整个项目打包成 docker image 发布

    会有这个想法是因为了解到 Tornado 是一个单线程的框架，一般都会放在 nginx 后面，部署时多半会部署多个实例，那么用 docker 就非常方便快捷

反思
+++++++++++++++++++++

时间
    对 Python 生态过于乐观和对 Tornado 难度的预估不足，导致花了太多时间在折腾把项目顺利跑起来和写异步单元测试上

    最后不得不放弃写测试代码，估算了估计还要4天时间才能完整把单元测试和集成测试写完

文档
    对于这个项目这种给内部用的代码来说，我觉得可能更好的文档编写方式是类似于 Swagger 那样把文档跟代码放在一起存放和维护

Python
    真是一门好语言，以前只是写写简单爬虫，这一次才完整体验了一下，熟练之后确实能很快出活

Homework
    这绝对是我写过的所有面试家庭作业里面花时间最多的一次。。。

    但也是收获最大和最值得的一次
